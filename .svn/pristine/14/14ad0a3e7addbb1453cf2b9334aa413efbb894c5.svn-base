// hide script from old browsers

jQuery(document).ready(function ($) {

//............

    // HAVE TO LOOP HERE TO HANDLE POTENTIAL MULTIPLE GALLERIES
    $('.kora_gallery_pagination').each(function () {
        //Plugin Controls
        var kg_imagectl = $(this).attr('kgictrl');         //image control
        var kg_audioctl = $(this).attr('kgactrl');         //audio control
        var kg_videoctl = $(this).attr('kgvctrl');         //video control
        var kg_titlectl = $(this).attr('kgtctrl');         //title control
        var kg_descctl = $(this).attr('kgdctrl');         //description control
        var kg_linkbase = $(this).attr('kglbase');         //Link
        var kg_filebase = $(this).attr('kgfbase');         //File base
        var kg_imagesize = $(this).attr('kgisize');         //Image size
        var kg_sort = $(this).attr('kg_sort');         //Sort by this control
        var kg_order = $(this).attr('kg_order');        //SORT ASC -or- SORT DESC
        var kg_loadimg = '';                              // THIS IS ONLY VALID FOR KGIS
        var kg_fspropsobj = $(this);                        //Object
        var kg_imageclip = $(this).attr('kgfs_imageclip');  //Image Clip
        var kg_pagesize = $(this).attr('kg_pagesize');      //perpage how many pics
        var kg_field = $(this).attr('kgfield');
        //alert(kg_field);
        //ResutfulAPI setup
        var tarresturl_str = kg_fspropsobj.attr('kgresturl');
        var tarresturl = tarresturl_str.split(",");
        //	alert(tarresturl.length);
        var kg_baseresturl = [];
        for (var i = 0; i < tarresturl.length; i++) {
            kg_baseresturl[i] = tarresturl[i].match(/.*&display=/);
            kg_baseresturl[i] = kg_baseresturl[i][0];
        }
        //alert(kg_pagesize);

        //var kg_baseresturl = tarresturl.match(/.*&display=/);
        //kg_baseresturl = kg_baseresturl[0];
        //alert(kg_baseresturl.length);
        var pics = [];
        $.ajaxSetup({async: false});
        kg_fspropsobj.append("<div class='pagination'><ul class='pages' /><button id='prev'>Prev</button><br><br><button id='next'>Next</button></div>");
        var sum = 0;
        var pos = 0;
        var pagesize = parseInt(kg_pagesize);

        for (var i = 0; i < tarresturl.length; i++) {
            console.log(tarresturl);
            $.getJSON(
                tarresturl[i],
                function (data) {
                    console.log('hi');
                    $.each(data, function (key, val) {

                        var htmlobj = KoraGalleryObjJSONToHtml(val, kg_fspropsobj, kg_imagectl, kg_audioctl, kg_videoctl, kg_titlectl, kg_descctl, kg_sort, kg_order, kg_linkbase, kg_filebase, kg_imagesize, kg_loadimg, kg_baseresturl[i], kg_imageclip, kg_field);
                        //kg_fspropsobj.children('div.pagination:first').children('ul.pages:first').append("<li  style style='display:none; list-style-type:none'>"+htmlobj+"</li>");
                        pics.push(htmlobj);
                        sum = sum + 1;
                    });

                }
            ).fail(function (jqxhr, textStatus, error) {
                    var err = textStatus + ', ' + error;
                    console.log("Request Failed: " + err);
                })
        }

        for (var i = 0; i < pics.length; i++) {
            kg_fspropsobj.children('div.pagination:first').children('ul.pages:first').append("<li style='display:none; list-style-type:none'>" + pics[i] + "</li>");

        }
        if (pos == 0) {
            for (var i = 0; i < pos + pagesize; i++) {
                kg_fspropsobj.children('div.pagination:first').children('ul.pages:first').children('li').eq(i).show();
            }
            for (var i = pos + pagesize; i < sum; i++) {
                kg_fspropsobj.children('div.pagination:first').children('ul.pages:first').children('li').eq(i).hide();
            }
            //kg_fspropsobj.children('div.pagination:first').children('ul.pages:first').children('li').eq(0).show();
        }
        $('#prev').click(function () {
            if (pos >= 0 + pagesize) {
                //alert(pos);
                var hide_end = pos + pagesize;
                for (var i = pos; i < hide_end; i++) {
                    //if (i <= sum - 1 && i > = 0) {
                    kg_fspropsobj.children('div.pagination:first').children('ul.pages:first').children('li').eq(i).hide();
                    //}
                }
                //kg_fspropsobj.children('div.pagination:first').children('ul.pages:first').children('li').eq(pos).hide();
                //pos=pos-1;
                pos = pos - pagesize;
                //alert(pos);
                var show_end = pos + pagesize;
                for (var i = pos; i < show_end; i++) {
                    //if (i <= sum - 1 && i > = 0) {
                    kg_fspropsobj.children('div.pagination:first').children('ul.pages:first').children('li').eq(i).show();
                    //}
                }
                //kg_fspropsobj.children('div.pagination:first').children('ul.pages:first').children('li').eq(pos).show();
                //alert(pos);
            }
        });
        $('#next').click(function () {
            if (pos < sum - pagesize) {
                //alert(pos);
                var hide_end = pos + pagesize;
                for (var i = pos; i < hide_end; i++) {
                    //if (i <= sum - 1 && i > = 0) {
                    kg_fspropsobj.children('div.pagination:first').children('ul.pages:first').children('li').eq(i).hide();
                    //}
                }
                //kg_fspropsobj.children('div.pagination:first').children('ul.pages:first').children('li').eq(pos).hide();
                //pos=pos+1;
                pos += pagesize;
                //alert(pos);
                var show_end = hide_end + pagesize;
                for (var i = pos; i < show_end; i++) {
                    //	if (i <= sum - 1 && i > = 0) {
                    kg_fspropsobj.children('div.pagination:first').children('ul.pages:first').children('li').eq(i).show();
                    //}
                }
                //kg_fspropsobj.children('div.pagination:first').children('ul.pages:first').children('li').eq(pos).show();
                //alert(pos);
            }
        });

        
    });

//.....
    $('.kora_gallery_infscroll1').each(function () {
        //Plugin Controls
        var kg_imagectl = $(this).attr('kgictrl');         //image control
        var kg_audioctl = $(this).attr('kgactrl');         //audio control
        var kg_videoctl = $(this).attr('kgvctrl');         //video control
        var kg_titlectl = $(this).attr('kgtctrl');         //title control
        var kg_descctl = $(this).attr('kgdctrl');         //description control
        var kg_linkbase = $(this).attr('kglbase');         //Link
        var kg_filebase = $(this).attr('kgfbase');         //File base
        var kg_imagesize = $(this).attr('kgisize');         //Image size
        var kg_sort = $(this).attr('kg_sort');         //Sort by this control
        var kg_order = $(this).attr('kg_order')         //SORT ASC -or- SORT DESC
        var kg_loadimg = '';                              // THIS IS ONLY VALID FOR KGIS
        var kg_fspropsobj = $(this);                        //Object
        var kg_imageclip = $(this).attr('kgfs_imageclip');  //Image Clip
        var kg_pagesize = $(this).attr('kg_pagesize');      //perpage how many pics
        var kg_field = $(this).attr('kgfield');
        //ResutfulAPI setup
        var tarresturl_str = kg_fspropsobj.attr('kgresturl');
        var tarresturl = tarresturl_str.split(",");
        //	alert(tarresturl.length);
        var kg_baseresturl = [];
        for (var i = 0; i < tarresturl.length; i++) {
            kg_baseresturl[i] = tarresturl[i].match(/.*&display=/);
            kg_baseresturl[i] = kg_baseresturl[i][0];
        }
        //alert(kg_pagesize);
        console.log(tarresturl);
        //var kg_baseresturl = tarresturl.match(/.*&display=/);
        //kg_baseresturl = kg_baseresturl[0];

        var pics = [];
        $.ajaxSetup({async: false});
        kg_fspropsobj.append("<div class='scroll'></div>");
        var sum = 0;
        var pos = 0;
        var pagesize = kg_pagesize;
        for (var i = 0; i < tarresturl.length; i++) {
            $.getJSON(
                tarresturl[i],
                function (data) {
                    $.each(data, function (key, val) {
                        var htmlobj = KoraGalleryObjJSONToHtml(val, kg_fspropsobj, kg_imagectl, kg_audioctl, kg_videoctl, kg_titlectl, kg_descctl, kg_sort, kg_order, kg_linkbase, kg_filebase, kg_imagesize, kg_loadimg, kg_baseresturl[i], kg_imageclip, kg_field, '', '');
                        //kg_fspropsobj.children('div.scroll').append("<p>"+htmlobj+"</p>");
                        pics.push(htmlobj);
                        sum = sum + 1;
                    });

                }
            ).fail(function () {
                    console.log("error");
                })
        }
        //alert(pics[0]);
        var i = 0;
        while (i < pagesize) {
            kg_fspropsobj.children('div.scroll').append("<p>" + pics[i] + "</p>" + "<div id = 'loading' align='center'></div>");
            i += 1;
        }
        var opts = {
            lines: 13 // The number of lines to draw
            , length: 28 // The length of each line
            , width: 14 // The line thickness
            , radius: 42 // The radius of the inner circle
            , scale: 1 // Scales overall size of the spinner
            , corners: 1 // Corner roundness (0..1)
            , color: '#000' // #rgb or #rrggbb or array of colors
            , opacity: 0.5 // Opacity of the lines
            , rotate: 0 // The rotation offset
            , direction: 1 // 1: clockwise, -1: counterclockwise
            , speed: 1 // Rounds per second
            , trail: 60 // Afterglow percentage
            , fps: 20 // Frames per second when using setTimeout() as a fallback for CSS
            , zIndex: 2e9 // The z-index (defaults to 2000000000)
            , className: 'spinner' // The CSS class to assign to the spinner
            , top: '50%' // Top position relative to parent
            , left: '50%' // Left position relative to parent
            , shadow: false // Whether to render a shadow
            , hwaccel: false // Whether to use hardware acceleration
            , position: 'absolute' // Element positioning
        }

        function loadMoreContent() {
            /*$.get('content.html', function(data) {
             if (data != '') {
             $('.scroll p:last').after(data);
             }
             });*/
            while (i < sum) {
                // $('.scroll p:last').after(data);
                kg_fspropsobj.children('div.scroll').append("<p>" + pics[i] + "</p>");
                i += 1;
                var target = document.getElementById('loading')
               // var spinner = new Spinner(opts).spin(target);
            }
        };

        $(window).scroll(function () {
            // Modify to adjust trigger point. You may want to add content
            // a little before the end of the page is reached. You may also want
            // to make sure you can't retrigger the end of page condition while
            // content is still loading.
            if($(window).scrollTop() + $(window).height() > $(document).height() - 200) {
            //if ($(window).scrollTop() == $(document).height() - $(window).height()) {
            //if ($(window).scrollTop() > $(window).height() / 4) {
                loadMoreContent();
            }
        });

        //$('ul.pages1').jscroll();
        //alert(pics.length);
        //$.ajaxSetup({ async: true });
        /*	kg_fspropsobj.children('.pagination').pagination(56, {
         num_edge_entries: 2,
         num_display_entries: 4,
         callback: pageselectCallback,
         items_per_page:1
         });*/
        // CALL THE FLEXSLIDER FUNCTION WITH OPTIONAL ARGUMENTS
        /*	kg_fspropsobj.children('.pagination').flexslider({
         animation: "kg_fspropsobj.attr('kgfs_animation')",                          //String: Select your animation type, "fade" or "slide"
         direction: "kg_fspropsobj.attr('kgfs_direction')",                          //String: Select the sliding direction, "horizontal" or "vertical"
         reverse:  GetTagAttBool(kg_fspropsobj.attr('kgfs_reverse')),                //Boolean: Reverse the animation direction
         animationLoop:  GetTagAttBool(kg_fspropsobj.attr('kgfs_animationloop')),    //Boolean: Should the animation loop? If false, directionNav will received "disable" classes at either end
         smoothHeight:  GetTagAttBool(kg_fspropsobj.attr('kgfs_smoothheight')),      //Boolean: Allow height of the slider to animate smoothly in horizontal mode
         startAt:  parseInt(kg_fspropsobj.attr('kgfs_startat')),                     //Integer: The slide that the slider should start on. Array notation (0 = first slide)
         slideshow:  GetTagAttBool(kg_fspropsobj.attr('kgfs_slideshow')),            //Boolean: Animate slider automatically
         slideshowSpeed:  parseInt(kg_fspropsobj.attr('kgfs_slidshowspeed')),        //Integer: Set the speed of the slideshow cycling, in milliseconds
         animationSpeed:  parseInt(kg_fspropsobj.attr('kgfs_animationspeed')),       //Integer: Set the speed of animations, in milliseconds
         initDelay:  GetTagAttBool(kg_fspropsobj.attr('kgfs_initdelay')),            //Integer: Set an initialization delay, in milliseconds
         randomize:  GetTagAttBool(kg_fspropsobj.attr('kgfs_randomize')),            //Boolean: Randomize slide order

         // Usability features
         pauseOnAction:  GetTagAttBool(kg_fspropsobj.attr('kgfs_pauseonaction')),    //Boolean: Pause the slideshow when interacting with control elements, highly recommended.
         pauseOnHover:  GetTagAttBool(kg_fspropsobj.attr('kgfs_pauseonhover')),      //Boolean: Pause the slideshow when hovering over slider, then resume when no longer hovering
         touch:  GetTagAttBool(kg_fspropsobj.attr('kgfs_touch')),                    //Boolean: Allow touch swipe navigation of the slider on touch-enabled devices
         video:  GetTagAttBool(kg_fspropsobj.attr('kgfs_video')),                    //Boolean: If using video in the slider, will prevent CSS3 3D Transforms to avoid graphical glitches

         // Carousel Options
         itemWidth:  parseInt(kg_fspropsobj.attr('kgfs_itemwidth')),      //Integer: Box-model width of individual carousel items, including horizontal borders and padding.
         itemMargin: parseInt(kg_fspropsobj.attr('kgfs_itemmargin')),     //Integer: Margin between carousel items.
         minItems:   parseInt(kg_fspropsobj.attr('kgfs_minitems')),       //Integer: Minimum number of carousel items that should be visible. Items will resize fluidly when below this.
         maxItems:   parseInt(kg_fspropsobj.attr('kgfs_maxitems')),       //Integer: Maxmimum number of carousel items that should be visible. Items will resize fluidly when above this limit.
         move:       parseInt(kg_fspropsobj.attr('kgfs_move'))            //Integer: Number of carousel items that should move on animation. If 0, slider will move all visible items.
         });*/
        //$('.kgfs_object').css('');
    });
//..........
//$('.scroll').jscroll();


    /*


     // HAVE TO LOOP HERE TO HANDLE POTENTIAL MULTIPLE GALLERIES
     $('.kora_gallery_flexslide').each(function () {
     //Plugin Controls
     var kg_imagectl  = $(this).attr('kgictrl');         //image control
     var kg_titlectl  = $(this).attr('kgtctrl');         //title control
     var kg_descctl   = $(this).attr('kgdctrl');         //description control
     var kg_linkbase  = $(this).attr('kglbase');         //Link
     var kg_filebase  = $(this).attr('kgfbase');         //File base
     var kg_imagesize = $(this).attr('kgisize');         //Image size
     var kg_sort      = $(this).attr('kg_sort');         //Sort by this control
     var kg_order     = $(this).attr('kg_order')         //SORT ASC -or- SORT DESC
     var kg_loadimg   = '';                              // THIS IS ONLY VALID FOR KGIS
     var kg_fspropsobj = $(this);                        //Object
     var kg_imageclip = $(this).attr('kgfs_imageclip');  //Image Clip

     //ResutfulAPI setup
     var tarresturl = kg_fspropsobj.attr('kgresturl');
     var kg_baseresturl = tarresturl.match(/.*&display=/);
     kg_baseresturl = kg_baseresturl[0];

     $.ajaxSetup({ async: false });
     kg_fspropsobj.append("<div class='flexslider'><ul class='slides' /></div>");
     $.getJSON(
     tarresturl,
     function(data) {
     $.each( data, function( key, val ) {
     var htmlobj = KoraGalleryObjJSONToHtml(val, kg_fspropsobj, kg_imagectl, kg_titlectl, kg_descctl, kg_sort, kg_order, kg_linkbase, kg_filebase, kg_imagesize, kg_loadimg, kg_baseresturl, kg_imageclip);
     kg_fspropsobj.children('div.flexslider:first').children('ul.slides:first').append("<li>"+htmlobj+"</li>");
     });
     }
     ).fail(function() {
     console.log( "error" );
     })

     $.ajaxSetup({ async: true });
     // CALL THE FLEXSLIDER FUNCTION WITH OPTIONAL ARGUMENTS
     kg_fspropsobj.children('.flexslider').flexslider({
     animation: "kg_fspropsobj.attr('kgfs_animation')",                          //String: Select your animation type, "fade" or "slide"
     direction: "kg_fspropsobj.attr('kgfs_direction')",                          //String: Select the sliding direction, "horizontal" or "vertical"
     reverse:  GetTagAttBool(kg_fspropsobj.attr('kgfs_reverse')),                //Boolean: Reverse the animation direction
     animationLoop:  GetTagAttBool(kg_fspropsobj.attr('kgfs_animationloop')),    //Boolean: Should the animation loop? If false, directionNav will received "disable" classes at either end
     smoothHeight:  GetTagAttBool(kg_fspropsobj.attr('kgfs_smoothheight')),      //Boolean: Allow height of the slider to animate smoothly in horizontal mode
     startAt:  parseInt(kg_fspropsobj.attr('kgfs_startat')),                     //Integer: The slide that the slider should start on. Array notation (0 = first slide)
     slideshow:  GetTagAttBool(kg_fspropsobj.attr('kgfs_slideshow')),            //Boolean: Animate slider automatically
     slideshowSpeed:  parseInt(kg_fspropsobj.attr('kgfs_slidshowspeed')),        //Integer: Set the speed of the slideshow cycling, in milliseconds
     animationSpeed:  parseInt(kg_fspropsobj.attr('kgfs_animationspeed')),       //Integer: Set the speed of animations, in milliseconds
     initDelay:  GetTagAttBool(kg_fspropsobj.attr('kgfs_initdelay')),            //Integer: Set an initialization delay, in milliseconds
     randomize:  GetTagAttBool(kg_fspropsobj.attr('kgfs_randomize')),            //Boolean: Randomize slide order

     // Usability features
     pauseOnAction:  GetTagAttBool(kg_fspropsobj.attr('kgfs_pauseonaction')),    //Boolean: Pause the slideshow when interacting with control elements, highly recommended.
     pauseOnHover:  GetTagAttBool(kg_fspropsobj.attr('kgfs_pauseonhover')),      //Boolean: Pause the slideshow when hovering over slider, then resume when no longer hovering
     touch:  GetTagAttBool(kg_fspropsobj.attr('kgfs_touch')),                    //Boolean: Allow touch swipe navigation of the slider on touch-enabled devices
     video:  GetTagAttBool(kg_fspropsobj.attr('kgfs_video')),                    //Boolean: If using video in the slider, will prevent CSS3 3D Transforms to avoid graphical glitches

     // Carousel Options
     itemWidth:  parseInt(kg_fspropsobj.attr('kgfs_itemwidth')),      //Integer: Box-model width of individual carousel items, including horizontal borders and padding.
     itemMargin: parseInt(kg_fspropsobj.attr('kgfs_itemmargin')),     //Integer: Margin between carousel items.
     minItems:   parseInt(kg_fspropsobj.attr('kgfs_minitems')),       //Integer: Minimum number of carousel items that should be visible. Items will resize fluidly when below this.
     maxItems:   parseInt(kg_fspropsobj.attr('kgfs_maxitems')),       //Integer: Maxmimum number of carousel items that should be visible. Items will resize fluidly when above this limit.
     move:       parseInt(kg_fspropsobj.attr('kgfs_move'))            //Integer: Number of carousel items that should move on animation. If 0, slider will move all visible items.
     });
     $('.kgfs_object').css('');
     });*/

    // NOT REALLY SURE HOW MULTIPLE INF SCROLL GALLERIES ON ONE PAGE WOULD WORK... BUT I'M TRYING TO CODE THUSLY
    // NOT REALLY SURE HOW MULTIPLE INF SCROLL GALLERIES ON ONE PAGE WOULD WORK... BUT I'M TRYING TO CODE THUSLY
    var kgif_lastgal = 0;
    var kgif_currgal = 0;
    var kgif_currpage = new Array();
    var kgif_isloading = false;
    $('.kora_gallery_infscroll1').each(function () {
        kgif_currpage[kgif_lastgal] = 0;
        $(this).attr('id', 'kora_gallery_infscroll_' + kgif_lastgal);
        // ADD THESE TAGS ONLY ONCE
        if (kgif_lastgal === 0) {
            $('body').prepend("<div id='nomore'>No more content</div>");
            $('#nomore').hide();
        }

        // LOAD THE 1ST PAGE OF EACH GALLERY HERE, NO NEED TO WAIT FOR TRIGGER FOR FIRST PAGE
        if (!kgif_isloading) {
            LoadGalleryPage(kgif_lastgal, 0);
        }

        kgif_lastgal++;
    });

    /*	$(window).scroll(function () {
     if (kgif_lastgal > 0) {
     // IF CURR GALL FLAGGED -1 (END OF GALLERY) ON LAST TRIGGER, MOVE TO NEXT GALLERY
     if (kgif_currpage[kgif_currgal] === -1) { kgif_currgal++; }

     var targal = $("#kora_gallery_infscroll_"+kgif_currgal);
     //var tarresturl = targal.attr('kgresturl');

     if($(window).scrollTop() + $(window).height() > $(document).height() - 200) {
     // IF CURR GALL NOW == LAST GAL, WE ARE AT END OF RESULTS, RETURN FALSE AND SHOW DIV
     if (kgif_currgal === kgif_lastgal)
     { ShowNoMore(); return false; }
     else if (!kgif_isloading)
     { LoadGalleryPage(kgif_currgal, kgif_currpage[kgif_currgal]); }
     }
     }
     });*/

    // THIS GETS TAG ATTS THAT ARE SUPPOSED TO BE BOOLEAN COMING IN AS 1 OR 0, OR JUST PROPERTY W/ NO VALUE AND RETURNS TRUE/FALSE
    function GetTagAttBool(val_) {
        if (val_ === '1') {
            return true;
        }
        else {
            return false;
        }
    }

    function LoadGalleryPage(id_, os_) {
        kgif_isloading = true;

        var targal = $("#kora_gallery_infscroll_" + id_);
        var tarresturl = targal.attr('kgresturl');
        var tarpgsz = targal.attr('kgis_pagesize');
        var kg_loadimg = targal.attr('kgis_loadimg');

        var kg_imagectl = targal.attr('kgictrl');
        var kg_audioctl = $(this).attr('kgactrl');         //audio control
        var kg_videoctl = $(this).attr('kgvctrl');         //video control
        var kg_titlectl = targal.attr('kgtctrl');
        var kg_descctl = targal.attr('kgdctrl');
        var kg_linkbase = targal.attr('kglbase');
        var kg_filebase = targal.attr('kgfbase');
        var kg_imagesize = targal.attr('kgisize');
        var kg_imageclip = targal.attr('kgfs_imageclip');
        var kg_sort = targal.attr('kg_sort');
        var kg_order = targal.attr('kg_order');
        var kg_field = $(this).attr('kgfield');
//......
        var tarresturl1 = tarresturl.split(",");
        //	alert(tarresturl);
        var kg_baseresturl = [];
        for (var i = 0; i < tarresturl1.length; i++) {
            kg_baseresturl[i] = tarresturl1[i].match(/.*&display=/);
            kg_baseresturl[i] = kg_baseresturl[i][0];
        }


        //var kg_baseresturl = tarresturl1[1].match(/.*&display=/);
        //kg_baseresturl = kg_baseresturl[0];
        //alert(kg_baseresturl.length);
        //alert(kg_baseresturl[1]);
        var user = targal.attr('user');
        var pass = targal.attr('pass');
        var retval = true;
        var pics1 = [];

        sum = 0;
        for (var i = 0; i < tarresturl1.length; i++) {
            //console.log(tarresturl1[i] + '&first=' + (kgif_currpage[id_] * tarpgsz) + '&count=' + tarpgsz);
            $.ajax({
                type: "GET",
                url: tarresturl1[i] + '&first=' + (kgif_currpage[id_] * tarpgsz) + '&count=' + tarpgsz,
                dataType: "json",
                success: function (data) {

                    if (data.length === 0) {
                        kgif_currpage[kgif_currgal] = -1;
                        kgif_isloading = false;
                        return;
                    }
                    $.each(data, function (key, val) {
                        var htmlobj = KoraGalleryObjJSONToHtml(val, $("#kora_gallery_infscroll_" + id_), kg_imagectl, kg_audioctl, kg_videoctl, kg_titlectl, kg_descctl, kg_sort, kg_order, kg_linkbase, kg_filebase, kg_imagesize, kg_loadimg, kg_baseresturl[i], kg_imageclip, kg_field, user, pass);
                        // var htmlobj = KoraGalleryObjJSONToHtml(val, targal, kg_imagectl, kg_titlectl, kg_descctl, kg_sort, kg_order, kg_linkbase, kg_filebase, kg_imagesize, kg_loadimg, kg_baseresturl[i], kg_imageclip);

                        //$("#kora_gallery_infscroll_"+id_).append(htmlobj);

                        pics1.push(htmlobj);
                        sum += 1;
                    });
                    kgif_isloading = false;
                    kgif_currpage[kgif_currgal]++;
                }
            });
        }
        //	alert(sum);
        /*for(var i=0;i<pics.length;i++){
         $("#kora_gallery_infscroll_"+id_).append(pics[i]);
         }*/
        return retval;
    }

    function changeObjWidth() {
        var obj = document.getElementsByClassName('kgfs_object');
        var objLength = obj.length;
        for (var i = 0; i < objLength; i++) {
            obj[i].style.width = '';
        }
    }

    function KoraGalleryObjJSONToHtml(obj_, kgifobj_, ictrl_, actrl_, vctrl_, tctrl_, dctrl_, sort_, order_, lbase_, fbase_, isize_, kg_loadimg_, restbaseurl_, imageclip_, fields, user, pass) {
        //alert(fields);
        var retval = '';
        retval += "<div class='kgfs_object' kid='" + obj_.kid + "' >";
        // IF WE CAN FIND AN IMAGE
        if ((typeof obj_[ictrl_].localName !== 'undefined') && (obj_[ictrl_].localName != '')) {
            var imgsrc = "";
            if (isize_ === 'full ') {
                imgsrc = "<img src='" + fbase_ + obj_[ictrl_].localName + "' />";
            } else {
                // THIS URL WILL START WITH PID/SID/TOKEN AND display= SO WE START APPENDING THERE
                imgresturl = restbaseurl_ + 'tn&query=' + encodeURI('KID,=,' + obj_.kid) + '&tn_imageclip=' + imageclip_ + '&sort=' + sort_ + '&order=' + order_;
                // THIS IS FOR KGIS, KGFS WILL OVERWRITE THIS BELOW DUE TO SYNC
                imgsrc = "<img class='kgis_loading' src='" + kg_loadimg_ + "' />";
                $.get(imgresturl, function (data) {
                    // this part works for flexslider since it's async blocked
                    imgsrc = data;
                    // this part works for kgis in async unblocked
                    kgifobj_.find('.kgfs_object[kid=' + obj_.kid + '] > .kgfs_img > a').html(data);
                });            }

            retval += "<div class='kgfs_img'>";
            if ((typeof lbase_ !== 'undefined') && (lbase_ != '')) {
                retval += "<form name='detail" + obj_.kid + "' action='" + lbase_ + "?kid=" + obj_.kid + "' method='post' enctype='multipart/form-data'>" +
                "<input type=hidden name='restful' value='" + restbaseurl_ + "'/>" +
                "<input type=hidden name='user' value='" + user + "'/>" +
                "<input type=hidden name='pass' value='" + pass + "'/>" +
                "<input type=hidden name='fields' value='" + fields + "'/>" +
                "</form>"
                + "<a href='#' onclick='document.forms[" + '"detail' + obj_.kid + '"' + "].submit(); return false;'>";
            }
            retval += imgsrc;
            if ((typeof lbase_ !== 'undefined') && (lbase_ != '')) {
                retval += "</a>";
            }
            retval += "</div>";
        }
        // TITLE GOES ABOVE
        if ((typeof tctrl_ !== 'undefined') && (tctrl_ != '')) {
            retval += "<div class='kgfs_title'>";
            if ((typeof lbase_ !== 'undefined') && (lbase_ != '')) {
                retval += "<form name='detail" + obj_.kid + "' action='" + lbase_ + "?kid=" + obj_.kid + "' method='post' enctype='multipart/form-data'>" +
                "<input type=hidden name='restful' value='" + restbaseurl_ + "'/>" +
                "<input type=hidden name='user' value='" + user + "'/>" +
                "<input type=hidden name='pass' value='" + pass + "'/>" +
                "<input type=hidden name='fields' value='" + fields + "'/>" +

                "</form>"
                + "<a href='#' onclick='document.forms[" + '"detail' + obj_.kid + '"' + "].submit(); return false;'>";
            }
            retval += obj_[tctrl_];
            if ((typeof lbase_ !== 'undefined') && (lbase_ != '')) {
                retval += "</a>";
            }
            retval += "</div>";
        }
        // DESCRIPTION GOES BELOW
        if ((typeof dctrl_ !== 'undefined') && (dctrl_ != '')) {
            retval += "<div class='kgfs_desc'>";
            if ((typeof lbase_ !== 'undefined') && (lbase_ != '')) {
                retval += "<form name='detail" + obj_.kid + "' action='" + lbase_ + "?kid=" + obj_.kid + "' method='post' enctype='multipart/form-data'>" +
                "</form>"
                + "<a href='#' onclick='document.forms[" + '"detail' + obj_.kid + '"' + "].submit(); return false;'>";
            }
            retval += obj_[dctrl_];
            if ((typeof lbase_ !== 'undefined') && (lbase_ != '')) {
                retval += "</a>";
            }
            retval += "</div>";
        }
        retval += "</div>";
        return retval;
    }
});

// end hiding script from old browsers -->
